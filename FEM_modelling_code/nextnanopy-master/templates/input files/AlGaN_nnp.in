#****************************************************************************
# Input file for nextnano++ software. (c) nextnano GmbH
#
# This input file simulates Al(x)Ga(1-x)N for different alloy compositions.
#
#****************************************************************************

#---------------------------------------------------
# Select strain option.
#---------------------------------------------------
 $STRAIN = 1  # include strain
#$STRAIN = 0  # do not include strain

 $Al_substrate           = 1.0      # Al alloy content of Al(x)Ga(1-x)As substrate (ListOfValues:0.0,0.5,1.0)

 $xmin                   = 0.0                               # minimum coordinate of whole structure (DisplayUnit:nm) (DoNotShowInUserInterface)
 $xmax                   = 1.0                             # maximum coordinate of whole structure, [Jogai2003] uses 70 nm (DisplayUnit:nm) (DoNotShowInUserInterface)
 $Temperature            = 300                               # temperature 300 K (DisplayUnit:K)

#----------------------------------------------------------------------------

global{ 
   simulate1D{}
   
   #------------------------------------------------------------------------------------------------
   # With these Miller indices, we can define a cation- or anion-faced structure.
   #   ==>  anion-faced structure: x_hkl = 0  0  1
   #   ==> cation-faced structure: x_hkl = 0  0 -1    <== considered in this tutorial
   #------------------------------------------------------------------------------------------------
   crystal_wz{
    # x_hkl = [0, 0,  1]  #  anion-faced structure             # Miller indices of x coordinate axis
      x_hkl = [0, 0, -1]  # cation-faced structure             # Miller indices of x coordinate axis
      y_hkl = [0, 1,  0]                                       # Miller indices of y coordinate axis
   }

   substrate{
      name = "Al(x)Ga(1-x)N"
      alloy_x = $Al_substrate
   }

 # temperature =   1   #   1 Kelvin
 # temperature = 300   # 300 Kelvin
   temperature = $Temperature
}

grid{
                     xgrid{
                          line{ pos =  $xmin              spacing = 0.005}
                          line{ pos =  $xmax              spacing = 0.005}
   }
}

database{   # redefine some default material parameters for matching nextnano3 results
   
   #### AlN ###################################################################################
   binary_wz{
      name = AlN
   }


}

structure{
   output_region_index{ boxes = no }
   output_material_index{ boxes = no }
   output_alloy_composition{ boxes = no }

   region{
      everywhere{
      }
      contact { name = dummy }
      binary{
         name = "GaN"
      }
   }

   region{
     line{ 
          x=[$xmin, $xmax]
      } 
     ternary_linear{
         name    = "Al(x)Ga(1-x)N"
         alloy_x = [0.0, 1.0]
         x       = [$xmin, $xmax]
     }
   }
}

contacts{
   fermi { name = "dummy" bias=0}
}

classical{
   Gamma{}
   HH{}
   LH{}
   SO{}
   output_bandedges{ averaged = yes }
   output_carrier_densities{}
   output_bandgap{}
}

poisson{
#   output_potential{}
#   output_electric_field{}
}


strain{
   pseudomorphic_strain{}
  
   output_strain_tensor{ simulation_system = yes }
   output_polarization_charges{}
   output_hydrostatic_strain{ }

   output_lattice_constants{}
   output_elastic_constants{}
   output_piezo_constants{}
   output_pyro_constants{}
}

#currents{
#   output_fermi_levels{}
#}

quantum {
   region{
      name = "qr_6band"
      x = [0.0, 100.0]
      boundary{
         x = neumann
      }
      no_density = yes # only wave functions are calculated, not charge densities
      kp_6band{
         num_ev = 12
      }
      output_wavefunctions{
         amplitudes = no
         probabilities = no
      }
      bulk_dispersion{

         lines{ # set of dispersion lines along crystal directions of high symmetry 
            name = "lines"
            position{ x = 0.99 }
            k_max = 1.0
            spacing  = 0.02
            shift_holes_to_zero = no #yes
         }

         path{ # dispersion along arbitrary path in k-space
            name = "user_defined_path"
            position{ x = 0.99 }

            point{ k = [0.0, 0.0, 1.0] }
            point{ k = [0.0, 0.0, 0.0] }
            point{ k = [1.0, 0.0, 0.0] }

            spacing  = 0.02
            shift_holes_to_zero = no #yes
         }

         output_bulk_dispersions{}
         output_masses{}
      }
   }
}

output{
   material_parameters{
      kp_parameters{}
   }
}
run{

!IF($STRAIN)
   strain{}
!ENDIF

#  poisson{}
   quantum{}
}
